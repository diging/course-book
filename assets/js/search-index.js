var lunr_index = lunr(function () {
    this.field('title', {boost: 10});
    this.field('body');
    this.ref('url');
 });
 

lunr_index.add({ url: '/2015/07/10/code-style.html', title: "Code Style", body: "For Java code, we will follow Google's code style guidelines. Please read up on the [guidelines](http://google.github.io/styleguide/javaguide.html). The only rule we change is the indentation. Instead of an indentation of 2, we use 4 spaces to indent the next level.\n\nYou can set your Eclipse preferences to only use spaces (and avoid tabs) by doing the following:\n\n1. Go to Eclipse's preferences\n1. Expand Java >> Code Style\n1. Go to Formatter\n1. Click the Edit button\n1. Click the Indentation tab\n1. Set Tab policy to \"Spaces only\"\n1. Make sure \"Indentation size\" is set to 4.\n1. Click ok.\n1. Close the preference dialog.\n"})
lunr_index.add({ url: '/2015/07/10/infrastructure.html', title: "Software Development Infrastructure", body: "In the Digital Innovation Group, we follow Continous Integration principles as much as possible. We are still in the process of setting up the infrastructure, but ideally all projects will use the following components.\n\n1. Source code is hosted at GitHub. Since all of our software is open source, all projects will be hosted in public repositories.\n2. Tests will run every time a change is pushed to the master branch of the repository or a pull request is made. Tests are run by either Travis CI or Jenkins.\n3. Jenkins will run code style checks on your committed code. If there are errors or warnings, it is your responsibility to fix these before a pull request can be merged.\n3. After a change has been pushed to/merged into the master branch, web applications will be deployed to a test instance by Jenkins.\n\nIf any of the above steps fail, it is your responsibility to check why a step failed and to fix it.\n"})
lunr_index.add({ url: '/2015/07/10/gitflow.html', title: "GitHub Workflow", body: "A few DigInG projects are hosted at SourceForge and use Subversion as version control system. However, most projects are hosted on GitHub and you will most likely interact with GitHub and Git in your projects. We will use the \"Gitflow Workflow\" described in this [article](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow). Please read it carefully, you will be expected to follow the described procedure. The most important points for you are:\n\n- For every story or bug you are working on, you will create a branch off of the develop branch. The branch's name will start with \"story\" or \"bugfix\" (depending on the type of ticket you are working) followed by the ticket id.\n- You will push your changes only to this branch.\n- Once you are done with your ticket, you will create a pull request to the develop branch.\n- Tests and code style checks will be run on your code.\n- If those pass, we will review your code:\n\t- If changes are required, you will edit your code and create a new pull request when you're done.\n- Once the test, code style checks, and code review pass, we will merge your pull request.\n- You will then delete your branch.\n\nRemember, unless there are urgent bugfixes or other things that need to be changed in the develop branch, you will never directly push to the develop branch. You will also never push to the master branch.\n"})
lunr_index.add({ url: '/2015/07/13/scrum-structure.html', title: "Scrum", body: "In DigInG we follow an agile methodology, specifically Scrum. You will work in small teams, which each has:\n\n- a product owner,\n- a scrum master,\n- and a development team.\n\nThe product owner is the person who knows the product under development and makes decisions about what features should be implemented in what order. The scrum master helps facilitating the scrum process and supports the development team by for example communicating with other parties (e.g. sysadmins) to remove road blocks. The development team is a (diverse) group of people working on developing software.  It usually includes software enginieers, testers, software architects, and others.\n"})
lunr_index.add({ url: '/2015/07/14/github.html', title: "GitHub Account", body: "Most of our projects are hosted on GitHub. In the beginning of the class you will learn how to use Git and GitHub. You will therefore need an account on GitHub. Please create your account by registering [here](https://github.com/join). Choose the free plan and don't create an organization. We will add you to the DigInG organization, once you start working on our projects.\n"})
lunr_index.add({ url: '/2015/07/15/jira-pivotaltracker.html', title: "Issue Tracking", body: "We use several different issue tracking systems for our projects. Depending on what project you are working on, you will need an account in [Jira](https://diging.atlassian.net/) and/or [Pivotaltracker](http://www.pivotaltracker.com/). Once you have created an account let us know what your username is and we will add you to our projects.\n"})
lunr_index.add({ url: '/2015/08/19/python-code-style.html', title: "Python Code Cleanliness - PEP8", body: "For Python projects, we will follow the [PEP8 Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/).\n\nTo ensure that your code conforms to PEP8, we use a tool called [Pylint](http://www.pylint.org/). **You should run Pylint before committing changes on a project**.\n\nYou can install Pylint from the Python Package Index using ``pip``:\n\n```bash\n$ pip install pylint\n```\n"})
lunr_index.add({ url: '/2015/08/19/into-to-git.html', title: "Intro to Git", body: "[Git](https://git-scm.com/) is a [Version Control System](https://en.wikipedia.org/wiki/Revision_control) that is widely used in software development projects. A VCS helps developers keep track of changes to source code over the course of a project. We use Git for all kinds of projects, not just for managing source code. A solid working knowledge of Git is essential for both researchers and developers in DigInG.\n\nFor a comprehensive introduction to Git, check out [this tutorial](http://git-scm.com/book/en/v2/Getting-Started-Git-Basics). In this post, we'll dive right in to using Git.\n\n# Installing Git\n\nYour computer may already have Git installed. Try typing the following into the command prompt:\n\n```shell\n$ git --version\n```\n\nIf you see something like ```git version 2.3.2 (Apple Git-55)```, you're good to go. If not, head over to [http://git-scm.com](https://git-scm.com/) and download the latest version for your platform.\n\n# Grab a Repository\n\nEach Git-controlled project is contained within a Git repository. We store all of our repositories on [<i class=\"fa fa-github\"></i> GitHub](https://github.com/). You can find all of our repositories on the [DigInG organization page](https://github.com/diging). We created a special repository called [``getting-started``](https://github.com/diging/getting-started) for this exercise.\n\nTo download the ``getting-started`` repository, enter the following into the command prompt:\n\n```shell\n$ git clone https://github.com/diging/getting-started\n```\n\nIf all goes well, you should see something like:\n\n```shell\nCloning into 'getting-started'...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nChecking connectivity... done.\n```\n\nYou should now find a new subdirectory called ``getting-started`` in your current working directory. Go ahead and enter that directory before moving on.\n\n```shell\n$ cd getting-started\n```\n\nYou have just **cloned** the ``getting-started`` repository. That means that you have created a local copy of the repository on your computer. You can now make changes to the local repository. When you're done working, you'll have to ``push`` those changes back up to the repository stored on GitHub.\n\n# Create a New Branch\n\nMost projects involve some amount of trial and error. Especially on collaborative projects, it is important to do that experimentation without negatively affecting the work that other people have already done. So before you start making changes in the Git repository that you just downloaded, you should create your own \"branch\". You can read all about branching [here](http://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell).\n\nFirst, find out what branch you're currently working on. Make sure that you're inside the repository (``getting-started``).\n\n```shell\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n```\n\nYou should see that you're working on the ``python`` branch. Decide on a name for your new branch. It should be something that describes or evokes the changes that you're going to make in that branch, e.g. an issue or story number. To create a new branch and start working on it, do:\n\n```shell\n$ git checkout -b your-branch-name\nSwitched to a new branch 'your-branch-name'\n$ git status\nOn branch your-branch-name\nnothing to commit, working directory clean\n```\n\n``checkout`` tells git that you want to switch to a different branch. The ``-b`` flag tells git to go ahead and create that branch if it doesn't already exist.\n\nYou can switch back to the ``master`` branch using ``checkout`` **without** the ``-b`` flag.\n\n```bash\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\nmanzanita:getting-started erickpeirson$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n```\n\nAnd back to your new branch:\n\n```bash\n$ git checkout your-branch-name\nSwitched to branch 'your-branch-name'\n```\n\n# Make Some Changes\n\nNow that you're working on your own branch, go ahead and make some changes. Open up the file  ``README.md`` in your favorite text editor, and add your name to the ``Contributors`` section. Save the file, and switch back to the terminal.\n\nAt this point you have **modified** the README.md file. You can see what files you have modified using ``git status``:\n\n```shell\n$ git status\nOn branch your-branch-name\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nIn order for your changes to be stored in the Git repository, you will need to **commit** those changes. First, you need to tell Git which modified files should be included in your commit. This is called **staging**. To stage your changes to ``README.md`` for your commit, use ``git add``:\n\n```shell\n$ git add README.md\n$ git status\nOn branch your-branch-name\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\tmodified:   README.md\n\n```\n\nNow you can ``commit`` your changes. Each commit must be accompanied by a commit message, a short description of the changes that you have made. Commit messages, specified by the ``-m`` flag, should be short and sweet.\n\n```shell\n$ git commit -m \"added myself to contributors in README.md\"\n[your-branch-name 1865082] added myself to contributors in README.md\n1 file changed, 6 insertions(+)\n```\n\nVoila! Your changes have been committed.\n\n# Pushing Your Commit\n\nIn order for your collaborators to see and expand on your work, you'll need to push your branch and your new commits back up to GitHub.com. To do that, use the ``push`` command.\n\nSince you're working on a new branch that you created locally, you'll first need to tell Git to replicate that branch in the remote repository. If you just do ``git push``, you'll get an error message:\n\n```shell\n$ git push\nfatal: The current branch your-branch-name has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin your-branch-name\n\n```\n\nGo ahead and follow the instructions in the error message, and create the \"upstream\" branch on the remote repository:\n\n```shell\n$ git push --set-upstream origin your-branch-name\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 396 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/diging/getting-started\n * [new branch]      your-branch-name -> your-branch-name\nBranch your-branch-name set up to track remote branch your-branch-name from origin.\n```\n\nNow that your branch exists on both your local repository and the remote repository, you can push any additional commits using ``git push`` without the additional flags.\n\n# Creating a Pull Request\n\nYou should also be able to see your changes on GitHub.com. Go to the repository at [https://github.com/diging/getting-started](https://github.com/diging/getting-started), and click on [branches](https://github.com/diging/getting-started/branches). You should see your branch under \"Your branches\":\n\n<img src=\"/assets/img/github/14D811E8-0F6F-4C71-B73F-A7CA06557247.png\" style=\"width: 100%;\" />\n\nIf you click on the name of your branch, you'll be taken to a page that looks a lot like the front page of the repository. But if you look closely, you'll see that your branch is selected, and your changes should show up in the README.\n\n<img src=\"/assets/img/github/F108EA54-65B8-47DB-8234-FDFFACD3E123.png\" style=\"width: 100%;\" />\n\nThe final step in contributing your changes to the project is to create a **pull request**. A pull request is essentially a request to merge your branch back into the main project branch. To create a pull request for your branch, click the green \"Compare & Pull Request\" button. You should be taken to a page that looks something like this:\n\n<img src=\"/assets/img/github/417B4D9A-DC02-4396-BC5A-A6BC2B903E7F.png\" style=\"width: 100%;\" />\n\nThere are several things to notice here. Toward the top, you should see two drop-down menus titled **base** and **compare**. The \"base\" branch is the branch that you want to merge your changes into. The \"compare\" branch is the branch that contains your changes. GitHub automatically checks to see whether the changes in the \"compare\" branch can be merged into the \"base\" branch without creating any conflicts.\n\nToward the bottom, you should see some details about the differences between the two branches. In the image above, there is just one commit to be merged, containing changes to only 1 file. Below that, you should see a snippet of the README.md file highlighting the changes that you made. The green highlighted lines are the ones that you added. If you had deleted lines, you'd see those in red.\n\nIn the middle of the page is a comment field. The title is automatically taken from your last commit. You should also write a longer comment that describes your changes. Once you've done that, click the green \"Create pull request\" button.\n\nIf all goes well, you should see something like this:\n\n<img src=\"/assets/img/github/8C68BFD2-14C8-4DA7-83A2-67C95C3FB5BA.png\" style=\"width: 100%;\" />\n\nOther participants in the project can now comment on your work, and discuss whether or not your changes should be incorporated into the main branch. It is up to the project owner to click the green \"Merge pull request\" button (you might not see this button if you don't have authorization).\n\nOnce the pull request has been approved and the branches merged, your pull request page should change to look like this:\n\n<img src=\"/assets/img/github/00C62E90-B379-4EC8-ACEA-BE712337A1F1.png\" style=\"width: 100%;\" />\n\nNow that your branch has been merged successfully, you can click the \"Delete branch\" button. For your next contribution, you'll create an entirely new branch!\n\nFinally, you should go back to your local git repository and switch back to the ``master`` branch.\n\n```shell\n$ git checkout master\nSwitched to branch 'master'\nYour branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n```\n\nNotice that your version of the ``master`` branch is now behind, because the version on the server contains the changes that were merged from your branch. To update your version of the ``master`` branch, use ``git pull``:\n\n```shell\n$ git pull\nUpdating 0c1d6d5..95a06fc\nFast-forward\n README.md | 6 ++++++\n 1 file changed, 6 insertions(+)\n```\n\n# That's it!\n\nYou've successfully contributed to a Git repository on GitHub. When you have time, it's a good idea to [read up on the mechanics of Git](http://git-scm.com/book/en/v2/Getting-Started-Git-Basics). You should also see our notes on our [GitHub Workflow](/2015/07/10/gitflow.html).\n"})
lunr_index.add({ url: '/2015/08/19/testing-in-python.html', title: "Testing in Python Projects", body: "All of our Python projects should include a comprehensive array of tests. For unit tests, we use the built-in Python [unittest](https://docs.python.org/2/library/unittest.html) framework.\n\nTo execute tests, we use a package called [nose](https://nose.readthedocs.org/en/latest/). To evaluate test coverage, we use the [coverage plugin](https://nose.readthedocs.org/en/latest/plugins/cover.html).\n\nYou should install both ``nose`` and ``coverage`` in your Python environment. For example, using ``pip``:\n\n```bash\n$ pip install nose coverage\n```\n\n**Prior to submitting a pull request, you should ensure test coverage of at least 95%**. For example, on the [tethne](http://github.com/diging/tethne) project, you would do:\n\n```bash\n$ nosetests --with-coverage --cover-package=tethne --cover-min-percentage=95\n```\n\nAfter all of the tests run, you should see something like this:\n\n```\n..................................................................................\nName                             Stmts   Miss  Cover   Missing\n--------------------------------------------------------------\ntethne                              10      0   100%\ntethne.analyze                       0      0   100%\ntethne.analyze.corpus               88      4    95%   82-84, 168, 171\ntethne.analyze.features             40      0   100%\ntethne.analyze.graph                17      0   100%\ntethne.classes                       0      0   100%\ntethne.classes.corpus              103     13    87%   12-14, 18-20, 135-136, 210-214\ntethne.classes.feature              98      5    95%   29, 48, 81, 88, 117\ntethne.classes.graphcollection     149     11    93%   78, 84, 104, 129, 234-236, 247-249, 259, 274, 335\ntethne.classes.paper                30      3    90%   14, 33, 37\ntethne.model                        34      9    74%   26-27, 32-33, 43-44, 53, 59-60\ntethne.model.corpus                  0      0   100%\ntethne.model.corpus.mallet         102     10    90%   148, 159-160, 173, 177, 210-211, 285, 302, 310\ntethne.networks                      2      0   100%\ntethne.networks.authors              5      0   100%\ntethne.networks.base                71      2    97%   96-97\ntethne.networks.features            28      0   100%\ntethne.networks.papers              11      1    91%   64\ntethne.readers                      36     32    11%   61, 63, 96-131\ntethne.readers.base                139      0   100%\ntethne.readers.dfr                 270    205    24%   98-110, 113, 116, 119, 122-127, 133, 140, 147, 154, 158, 164-180, 259-265, 297-311, 345-359, 395-401, 434-461, 485-536, 551-574, 593-599, 606, 625-651, 670-682, 695-701, 728-749\ntethne.readers.wos                 135     17    87%   95-98, 154-155, 242-248, 252-254, 258-260, 291\ntethne.utilities                   132     73    45%   9-16, 48-54, 63, 86, 92-95, 102-105, 112-118, 128-133, 144-153, 170-172, 175-176, 197-222, 229-230, 233-238, 241-244\ntethne.writers                       0      0   100%\ntethne.writers.corpus               57      2    96%   26-27\ntethne.writers.graph               175     99    43%   73-184, 202-206, 232-235, 254-256, 262, 278-285, 296-323, 330, 334\n--------------------------------------------------------------\nTOTAL                             1732    486    72%\nnose.plugins.cover: ERROR: TOTAL Coverage did not reach minimum required: 95%\n```\n\nNotice that there was only 72% coverage, so the test failed. The ``missing`` column tells you where to look for executable code that is not covered by any tests.\n"})
