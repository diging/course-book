var lunr_index = lunr(function () {
    this.field('title', {boost: 10});
    this.field('body');
    this.ref('url');
 });
 

lunr_index.add({ url: '/2015/07/10/code-style.html', title: "Code Style", body: "For Java code, we will follow Google's code style guidelines. Please read up on the [guidelines](http://google.github.io/styleguide/javaguide.html). The only rule we change is the indentation. Instead of an indentation of 2, we use 4 spaces to indent the next level.\n\nYou can set your Eclipse preferences to only use spaces (and avoid tabs) by doing the following:\n\n1. Go to Eclipse's preferences\n1. Expand Java >> Code Style\n1. Go to Formatter\n1. Click the Edit button\n1. Click the Indentation tab\n1. Set Tab policy to \"Spaces only\"\n1. Make sure \"Indentation size\" is set to 4.\n1. Click ok.\n1. Close the preference dialog.\n"})
lunr_index.add({ url: '/2015/07/10/infrastructure.html', title: "Software Development Infrastructure", body: "In the Digital Innovation Group, we follow Continous Integration principles as much as possible. We are still in the process of setting up the infrastructure, but ideally all projects will use the following components.\n\n1. Source code is hosted at GitHub. Since all of our software is open source, all projects will be hosted in public repositories.\n2. Tests will run every time a change is pushed to the master branch of the repository or a pull request is made. Tests are run by either Travis CI or Jenkins.\n3. Jenkins will run code style checks on your committed code. If there are errors or warnings, it is your responsibility to fix these before a pull request can be merged.\n3. After a change has been pushed to/merged into the master branch, web applications will be deployed to a test instance by Jenkins.\n\nIf any of the above steps fail, it is your responsibility to check why a step failed and to fix it.\n"})
lunr_index.add({ url: '/2015/07/10/gitflow.html', title: "GitHub Workflow", body: "A few DigInG projects are hosted at SourceForge and use Subversion as version control system. However, most projects are hosted on GitHub and you will most likely interact with GitHub and Git in your projects. We will use the \"Gitflow Workflow\" described in this [article](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow). Please read it carefully, you will be expected to follow the described procedure. The most important points for you are:\n\n- For every story or bug you are working on, you will create a new branch off of the ``develop`` branch. The branch's name will start with \"story\" or \"bugfix\" (depending on the type of ticket you are working) followed by the ticket id.\n- You will commit and push your changes only to this branch.\n- Once you are done with your ticket, you will create a pull request to the ``develop`` branch.\n- Tests and code style checks will be run on your code.\n\t- For Python projects, see [Python Code Cleanliness]({% post_url 2015-08-19-python-code-style  %}) and [Testing in Python]({% post_url 2015-08-19-testing-in-python  %}).\n- If those pass, we will review your code:\n\t- If changes are required, you will edit your code and create a new pull request when you're done.\n- Once the test, code style checks, and code review pass, we will merge your pull request.\n- You will then delete your branch.\n\nRemember, unless there are urgent bugfixes or other things that need to be changed in the develop branch, you will never directly push to the develop branch. You will also never push to the master branch.\n"})
lunr_index.add({ url: '/2015/07/13/scrum-structure.html', title: "Scrum", body: "In DigInG we follow an agile methodology, specifically Scrum. You will work in small teams, which each has:\n\n- a product owner,\n- a scrum master,\n- and a development team.\n\nThe product owner is the person who knows the product under development and makes decisions about what features should be implemented in what order. The scrum master helps facilitating the scrum process and supports the development team by for example communicating with other parties (e.g. sysadmins) to remove road blocks. The development team is a (diverse) group of people working on developing software.  It usually includes software enginieers, testers, software architects, and others.\n"})
lunr_index.add({ url: '/2015/07/14/github.html', title: "GitHub Account", body: "Most of our projects are hosted on GitHub. In the beginning of the class you will learn how to use Git and GitHub. You will therefore need an account on GitHub. Please create your account by registering [here](https://github.com/join). Choose the free plan and don't create an organization. We will add you to the DigInG organization, once you start working on our projects.\n\nDon't forget to add a picture of yourself to your GitHub profile!\n"})
lunr_index.add({ url: '/2015/07/15/jira-pivotaltracker.html', title: "Issue Tracking", body: "We use several different issue tracking systems for our projects. Depending on what project you are working on, you will need an account in [Jira](https://diging.atlassian.net/) and/or [Pivotaltracker](http://www.pivotaltracker.com/). Once you have created an account let us know what your username is and we will add you to our projects.\n\n# Pivotal Tracker Tutorial\n\nWe'll go over how to use Pivotal Tracker in class. [These videos](https://www.pivotaltracker.com/help/gettingstarted) also provide an excellent introduction to Pivotal Tracker and Agile development in general.\n\n# JIRA Tutorials\n\nJIRA is a bit more complicated than Pivotal Tracker, but also more powerful. [These tutorials](https://confluence.atlassian.com/display/AGILE/JIRA+Agile+Documentation) are an excellent resource.\n"})
lunr_index.add({ url: '/2015/08/19/python-code-style.html', title: "Python Code Cleanliness - PEP8", body: "For Python projects, we will follow the [PEP8 Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/).\n\nTo ensure that your code conforms to PEP8, we use a tool called [Pylint](http://www.pylint.org/). **You should run Pylint before committing changes on a project**.\n\nYou can install Pylint from the Python Package Index using ``pip``:\n\n```bash\n$ pip install pylint\n```\n"})
lunr_index.add({ url: '/2015/08/19/into-to-git.html', title: "Intro to Git", body: "[Git](https://git-scm.com/) is a [Version Control System](https://en.wikipedia.org/wiki/Revision_control) that is widely used in software development projects. A VCS helps developers keep track of changes to source code over the course of a project. We use Git for all kinds of projects, not just for managing source code. A solid working knowledge of Git is essential for both researchers and developers in DigInG.\n\nFor a comprehensive introduction to Git, check out [this tutorial](http://git-scm.com/book/en/v2/Getting-Started-Git-Basics). In this post, we'll dive right in to using Git.\n\n# Installing Git\n\nYour computer may already have Git installed. Try typing the following into the command prompt:\n\n```shell\n$ git --version\n```\n\nIf you see something like ```git version 2.3.2 (Apple Git-55)```, you're good to go. If not, head over to [http://git-scm.com](https://git-scm.com/) and download the latest version for your platform.\n\n# Grab a Repository\n\nEach Git-controlled project is contained within a Git repository. We store all of our repositories on [<i class=\"fa fa-github\"></i> GitHub](https://github.com/). You can find all of our repositories on the [DigInG organization page](https://github.com/diging). We created a special repository called [``getting-started``](https://github.com/diging/getting-started) for this exercise.\n\nTo download the ``getting-started`` repository, enter the following into the command prompt:\n\n```shell\n$ git clone https://github.com/diging/getting-started\n```\n\nIf all goes well, you should see something like:\n\n```shell\nCloning into 'getting-started'...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nChecking connectivity... done.\n```\n\nYou should now find a new subdirectory called ``getting-started`` in your current working directory. Go ahead and enter that directory before moving on.\n\n```shell\n$ cd getting-started\n```\n\nYou have just **cloned** the ``getting-started`` repository. That means that you have created a local copy of the repository on your computer. You can now make changes to the local repository. When you're done working, you'll have to ``push`` those changes back up to the repository stored on GitHub.\n\n# Create a New Branch\n\nMost projects involve some amount of trial and error. Especially on collaborative projects, it is important to do that experimentation without negatively affecting the work that other people have already done. So before you start making changes in the Git repository that you just downloaded, you should create your own \"branch\". You can read all about branching [here](http://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell).\n\nFirst, find out what branch you're currently working on. Make sure that you're inside the repository (``getting-started``).\n\n```shell\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n```\n\nYou should see that you're working on the ``python`` branch. Decide on a name for your new branch. It should be something that describes or evokes the changes that you're going to make in that branch, e.g. an issue or story number. To create a new branch and start working on it, do:\n\n```shell\n$ git checkout -b your-branch-name\nSwitched to a new branch 'your-branch-name'\n$ git status\nOn branch your-branch-name\nnothing to commit, working directory clean\n```\n\n``checkout`` tells git that you want to switch to a different branch. The ``-b`` flag tells git to go ahead and create that branch if it doesn't already exist.\n\nYou can switch back to the ``master`` branch using ``checkout`` **without** the ``-b`` flag.\n\n```bash\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\nmanzanita:getting-started erickpeirson$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n```\n\nAnd back to your new branch:\n\n```bash\n$ git checkout your-branch-name\nSwitched to branch 'your-branch-name'\n```\n\n# Make Some Changes\n\nNow that you're working on your own branch, go ahead and make some changes. Open up the file  ``README.md`` in your favorite text editor, and add your name to the ``Contributors`` section. Save the file, and switch back to the terminal.\n\nAt this point you have **modified** the README.md file. You can see what files you have modified using ``git status``:\n\n```shell\n$ git status\nOn branch your-branch-name\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nIn order for your changes to be stored in the Git repository, you will need to **commit** those changes. First, you need to tell Git which modified files should be included in your commit. This is called **staging**. To stage your changes to ``README.md`` for your commit, use ``git add``:\n\n```shell\n$ git add README.md\n$ git status\nOn branch your-branch-name\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\tmodified:   README.md\n\n```\n\nNow you can ``commit`` your changes. Each commit must be accompanied by a commit message, a short description of the changes that you have made. Commit messages, specified by the ``-m`` flag, should be short and sweet.\n\n```shell\n$ git commit -m \"added myself to contributors in README.md\"\n[your-branch-name 1865082] added myself to contributors in README.md\n1 file changed, 6 insertions(+)\n```\n\nVoila! Your changes have been committed.\n\n# Pushing Your Commit\n\nIn order for your collaborators to see and expand on your work, you'll need to push your branch and your new commits back up to GitHub.com. To do that, use the ``push`` command.\n\nSince you're working on a new branch that you created locally, you'll first need to tell Git to replicate that branch in the remote repository. If you just do ``git push``, you'll get an error message:\n\n```shell\n$ git push\nfatal: The current branch your-branch-name has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin your-branch-name\n\n```\n\nGo ahead and follow the instructions in the error message, and create the \"upstream\" branch on the remote repository:\n\n```shell\n$ git push --set-upstream origin your-branch-name\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 396 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/diging/getting-started\n * [new branch]      your-branch-name -> your-branch-name\nBranch your-branch-name set up to track remote branch your-branch-name from origin.\n```\n\nNow that your branch exists on both your local repository and the remote repository, you can push any additional commits using ``git push`` without the additional flags.\n\n# Creating a Pull Request\n\nYou should also be able to see your changes on GitHub.com. Go to the repository at [https://github.com/diging/getting-started](https://github.com/diging/getting-started), and click on [branches](https://github.com/diging/getting-started/branches). You should see your branch under \"Your branches\":\n\n<img src=\"{{ \"/assets/img/github/14D811E8-0F6F-4C71-B73F-A7CA06557247.png\" | prepend: site.baseurl }}\" style=\"width: 100%;\" />\n\nIf you click on the name of your branch, you'll be taken to a page that looks a lot like the front page of the repository. But if you look closely, you'll see that your branch is selected, and your changes should show up in the README.\n\n<img src=\"{{ \"/assets/img/github/F108EA54-65B8-47DB-8234-FDFFACD3E123.png\" | prepend: site.baseurl }}\" style=\"width: 100%;\" />\n\nThe final step in contributing your changes to the project is to create a **pull request**. A pull request is essentially a request to merge your branch back into the main project branch. To create a pull request for your branch, click the green \"Compare & Pull Request\" button. You should be taken to a page that looks something like this:\n\n<img src=\"{{ \"/assets/img/github/417B4D9A-DC02-4396-BC5A-A6BC2B903E7F.png\" | prepend: site.baseurl }}\" style=\"width: 100%;\" />\n\nThere are several things to notice here. Toward the top, you should see two drop-down menus titled **base** and **compare**. The \"base\" branch is the branch that you want to merge your changes into. The \"compare\" branch is the branch that contains your changes. GitHub automatically checks to see whether the changes in the \"compare\" branch can be merged into the \"base\" branch without creating any conflicts.\n\nToward the bottom, you should see some details about the differences between the two branches. In the image above, there is just one commit to be merged, containing changes to only 1 file. Below that, you should see a snippet of the README.md file highlighting the changes that you made. The green highlighted lines are the ones that you added. If you had deleted lines, you'd see those in red.\n\nIn the middle of the page is a comment field. The title is automatically taken from your last commit. You should also write a longer comment that describes your changes. Once you've done that, click the green \"Create pull request\" button.\n\nIf all goes well, you should see something like this:\n\n<img src=\"{{ \"/assets/img/github/8C68BFD2-14C8-4DA7-83A2-67C95C3FB5BA.png\" | prepend: site.baseurl }}\" style=\"width: 100%;\" />\n\nOther participants in the project can now comment on your work, and discuss whether or not your changes should be incorporated into the main branch. It is up to the project owner to click the green \"Merge pull request\" button (you might not see this button if you don't have authorization).\n\nOnce the pull request has been approved and the branches merged, your pull request page should change to look like this:\n\n<img src=\"{{ \"/assets/img/github/00C62E90-B379-4EC8-ACEA-BE712337A1F1.png\" | prepend: site.baseurl }}\" style=\"width: 100%;\" />\n\nNow that your branch has been merged successfully, you can click the \"Delete branch\" button. For your next contribution, you'll create an entirely new branch!\n\nFinally, you should go back to your local git repository and switch back to the ``master`` branch.\n\n```shell\n$ git checkout master\nSwitched to branch 'master'\nYour branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n```\n\nNotice that your version of the ``master`` branch is now behind, because the version on the server contains the changes that were merged from your branch. To update your version of the ``master`` branch, use ``git pull``:\n\n```shell\n$ git pull\nUpdating 0c1d6d5..95a06fc\nFast-forward\n README.md | 6 ++++++\n 1 file changed, 6 insertions(+)\n```\n\n# That's it!\n\nYou've successfully contributed to a Git repository on GitHub. When you have time, it's a good idea to [read up on the mechanics of Git](http://git-scm.com/book/en/v2/Getting-Started-Git-Basics). You should also see our notes on our [GitHub Workflow](/2015/07/10/gitflow.html).\n"})
lunr_index.add({ url: '/2015/08/19/testing-in-python.html', title: "Testing in Python Projects", body: "All of our Python projects should include a comprehensive array of tests. For unit tests, we use the built-in Python [unittest](https://docs.python.org/2/library/unittest.html) framework.\n\nTo execute tests, we use a package called [nose](https://nose.readthedocs.org/en/latest/). To evaluate test coverage, we use the [coverage plugin](https://nose.readthedocs.org/en/latest/plugins/cover.html).\n\nYou should install both ``nose`` and ``coverage`` in your Python environment. For example, using ``pip``:\n\n```bash\n$ pip install nose coverage\n```\n\n**Prior to submitting a pull request, you should ensure test coverage of at least 95%**. For example, on the [tethne](http://github.com/diging/tethne) project, you would do:\n\n```bash\n$ nosetests --with-coverage --cover-package=tethne --cover-min-percentage=95\n```\n\nAfter all of the tests run, you should see something like this:\n\n```\n..................................................................................\nName                             Stmts   Miss  Cover   Missing\n--------------------------------------------------------------\ntethne                              10      0   100%\ntethne.analyze                       0      0   100%\ntethne.analyze.corpus               88      4    95%   82-84, 168, 171\ntethne.analyze.features             40      0   100%\ntethne.analyze.graph                17      0   100%\ntethne.classes                       0      0   100%\ntethne.classes.corpus              103     13    87%   12-14, 18-20, 135-136, 210-214\ntethne.classes.feature              98      5    95%   29, 48, 81, 88, 117\ntethne.classes.graphcollection     149     11    93%   78, 84, 104, 129, 234-236, 247-249, 259, 274, 335\ntethne.classes.paper                30      3    90%   14, 33, 37\ntethne.model                        34      9    74%   26-27, 32-33, 43-44, 53, 59-60\ntethne.model.corpus                  0      0   100%\ntethne.model.corpus.mallet         102     10    90%   148, 159-160, 173, 177, 210-211, 285, 302, 310\ntethne.networks                      2      0   100%\ntethne.networks.authors              5      0   100%\ntethne.networks.base                71      2    97%   96-97\ntethne.networks.features            28      0   100%\ntethne.networks.papers              11      1    91%   64\ntethne.readers                      36     32    11%   61, 63, 96-131\ntethne.readers.base                139      0   100%\ntethne.readers.dfr                 270    205    24%   98-110, 113, 116, 119, 122-127, 133, 140, 147, 154, 158, 164-180, 259-265, 297-311, 345-359, 395-401, 434-461, 485-536, 551-574, 593-599, 606, 625-651, 670-682, 695-701, 728-749\ntethne.readers.wos                 135     17    87%   95-98, 154-155, 242-248, 252-254, 258-260, 291\ntethne.utilities                   132     73    45%   9-16, 48-54, 63, 86, 92-95, 102-105, 112-118, 128-133, 144-153, 170-172, 175-176, 197-222, 229-230, 233-238, 241-244\ntethne.writers                       0      0   100%\ntethne.writers.corpus               57      2    96%   26-27\ntethne.writers.graph               175     99    43%   73-184, 202-206, 232-235, 254-256, 262, 278-285, 296-323, 330, 334\n--------------------------------------------------------------\nTOTAL                             1732    486    72%\nnose.plugins.cover: ERROR: TOTAL Coverage did not reach minimum required: 95%\n```\n\nNotice that there was only 72% coverage, so the test failed. The ``missing`` column tells you where to look for executable code that is not covered by any tests.\n"})
lunr_index.add({ url: '/2015/08/19/github-issues.html', title: "Reporting Bugs", body: "We use the GitHub Issues tracking system for bug reporting and feature requests. If something doesn't behave as expected when you're using our software, you should report it by creating a new issue on that project's GitHub page.\n\n[This article](https://guides.github.com/features/issues/) provides an excellent introduction to the Issue tracker on GitHub. We really like the Adobe Brackets guide for bug reporting, [here](https://github.com/adobe/brackets/wiki/How-to-Report-an-Issue). To steal from their guide, each bug report should include the following:\n\n* **Descriptive title** - use keywords so others can find your bug (avoiding duplicates)\n* **Steps to trigger** the problem that are specific, and repeatable\n* What happens when you follow the steps, and what you **expected** to happen instead.\n* Include the exact text of any **error messages** if applicable (or upload screenshots).\n* **Software version** (or if you're pulling directly from Git, your current commit SHA - use ``git rev-parse HEAD``)\n* Did this work in a **previous version**? If so, also provide the version that it worked in.\n"})
lunr_index.add({ url: '/2015/09/09/spring-tutorial-one.html', title: "Spring Tutorial One", body: "## Create a new Project\n\nTo get you a little bit more familiar with Spring, let's start with a short tutorial in which you set up a new Spring MVC project.\n\nIn Eclipse, create a new project by selecting File > New > Other...\n\nIn the dialog that opens, from the folder \"Maven\", select \"Maven Project\".\n![New Project Dialog]({{ site.baseurl }}/assets/img/spring/new-project.png)\n\nClick \"Next\". On the nex page make sure the \"Use default Workspace location\" checkbox is checked and \"Create a simple project\" is **unchecked**. Click \"Next\".\n\nOn the next page, filter available archetypes by the word \"webapp\". The filter results should have an archetype with the artifact id \"maven-archetype-webapp\". Select this archetype and click \"Next\".\n![Archetype Selection]({{ site.baseurl }}/assets/img/spring/archetype-selection.png)\n\nNow enter \"edu.asu.diging.tutorial.spring\" in the field \"Group Id\" and \"one\" in the field \"Artifact Id\". Click \"Finish\".\n\nEclipse should now generate a new web application project for you called \"one\".\n\nSo what just happened? You used Maven's archetype system to generate a new project with a particular structure, the structure of a typical webapp. Archetypes in Maven are blueprints of projects, and using those blueprints you can create new projects. There are a ton of archetypes for all kinds of purposes. We just used a very basic one.\n\n## Fix the Project\n\nNext, we have to make sure our project has all necessary folders. Maven might have missed one or two. In the Project Explorer, open the folder \"Java Resources\". If this folder does not contain a folder called \"src/main/java\" and/or \"src/test/java\", do the following:\n\n- If \"src/main/java\" is missing: open the folder \"src\" in the root directory of your project, then open \"main\". Create a new folder called \"java\".\n- If \"src/test/java\" is missing: open the folder \"src\" in the root directory, create a folder \"test\" in that folder. Then create a folder \"java\" in your folder \"test\".\n\nOnce you've created those folders, right click on your project and select Maven > Update Project... Select \"one\" from the list of projects, and click \"OK\". You should now see the folder(s) you've just created under \"Java Resources\".\n\n![Source Folders in Project Explorer]({{ site.baseurl }}/assets/img/spring/source-folders.png)\n\n## Add Spring Dependencies\n\nNext, open the file \"pom.xml\" of your new project. At the bottom of the editor, you have several tabs. Click on the \"pom.xml\" tab.\n![pom.xml]({{ site.baseurl }}/assets/img/spring/pom-xml.png)\n\nInside the \"dependencies\" tag, add the following piece of code:\n\n    <!-- Spring dependencies -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>4.2.1.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>4.2.1.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>4.2.1.RELEASE</version>\n    </dependency>\n\n## Start up your project\n\nOk, so we are all set up. Let's see if the project starts up. Right click on your project and select \"Run As...\" > \"Run on Server\". Select what instance of Tomcat you want your project to run on (if you haven't done so, you need to add Tomcat to your Runtime Environments) and click \"Finish\". Once Tomcat has started, you should see a page that says \"Hello World!\" in the browser that opens up in Eclipse.\n\n**Note**: the project would have started just fine if we didn't add the Spring dependencies before. So far, Spring isn't doing anything.\n\n## Let Spring take over\n\nNow, you are all setup to start with Spring. First, you need to tell Tomcat that you want Spring to handle incoming requests. You do this by specifying which servlet Tomcat should use as \"entry point\" into your application. Open the file **web.xml** located in **src > main > webapp > WEB-INF**. Add the following code inside the \"\n\" tag after the \"display-name\" section:\n\n    <servlet>\n    \t<servlet-name>dispatcher</servlet-name>\n    \t<servlet-class>\n    \t\torg.springframework.web.servlet.DispatcherServlet\n    \t</servlet-class>\n    \t<load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n    \t<servlet-name>dispatcher</servlet-name>\n    \t<url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n    <context-param>\n    \t<param-name>contextConfigLocation</param-name>\n    \t<param-value>/WEB-INF/dispatcher-servlet.xml</param-value>\n    </context-param>\n\n    <listener>\n    \t<listener-class>\n    \t\torg.springframework.web.context.ContextLoaderListener\n    \t</listener-class>\n    </listener>\n\nIn addition, remove the **!DOCTYPE** declation and replace the **web-app** tag with:\n\n    <web-app id=\"WebApp_ID\" version=\"2.3\"\n        xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee\n        http://java.sun.com/xml/ns/j2ee/web-app_2_3.xsd\">\n\nYour file should now look like this:\n\n    <web-app id=\"WebApp_ID\" version=\"2.3\"\n        xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee\n        http://java.sun.com/xml/ns/j2ee/web-app_2_3.xsd\">\n\n        <servlet>\n            <servlet-name>dispatcher</servlet-name>\n            <servlet-class>\n                org.springframework.web.servlet.DispatcherServlet\n            </servlet-class>\n            <load-on-startup>1</load-on-startup>\n            <init-param>\n                <param-name>contextConfigLocation</param-name>\n                <param-value>/WEB-INF/spring/servlet-context.xml</param-value>\n            </init-param>\n        </servlet>\n\n        <servlet-mapping>\n            <servlet-name>dispatcher</servlet-name>\n            <url-pattern>/</url-pattern>\n        </servlet-mapping>\n\n        <context-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>/WEB-INF/spring/root-context.xml</param-value>\n        </context-param>\n\n        <listener>\n            <listener-class>\n                org.springframework.web.context.ContextLoaderListener\n            </listener-class>\n        </listener>\n    </web-app>\n\nWhat did you just do? First, you specified a servlet that Tomcat should know (the \"servlet\" section). You named the servlet \"dispatcher\" and you told Tomcat that you wanted it to be of type \"org.springframework.web.servlet.DispatcherServlet\". You also told Tomcat to initialize the dispatcher servlet with a file named **servlet-context.xml** located in **WEB-INF > spring**.\n\n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>\n            org.springframework.web.servlet.DispatcherServlet\n        </servlet-class>\n        <load-on-startup>1</load-on-startup>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>/WEB-INF/spring/servlet-context.xml</param-value>\n        </init-param>\n    </servlet>\n\n Next, you mapped the servlet to the root path of your application. Tomcat will now redirect all incoming requests to \"http://you-tomcat/your-application/\" to the dispatcher servlet.\n\n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n\nThe last two sections then specify that Tomcat should load the org.springframework.web.context.ContextLoaderListener, which is configured by the file given in the **context-param** section before. The ContextLoaderListener creates a web application context from which all other contexts inherit (e.g. the context the dispatcher servlet loads).\n\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/root-context.xml</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>\n            org.springframework.web.context.ContextLoaderListener\n        </listener-class>\n    </listener>\n\nNow, we need to create the context specification files we referenced in the web.xml file. Create two new files called **root-context.xml** and **servlet-context.xml** in the folder **src > main > webapp > WEB-INF > spring** (also create a spring folder in WEB-INF if you haven't done so yet). The file **root-context.xml** should contain the following\n\n    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\n    </beans>\n\nBasically, this context specification tells Spring not to load anything. The file is empty besides the XML root element. This is ok. The root context specifies beans that should be present in all contexts (you can register more than just one servlet in web.xml and each creates its own context).\n\nThe file **servlet-context.xml** should contain:\n\n    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n        xsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/mvc\n    http://www.springframework.org/schema/mvc/spring-mvc.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\">\n\n        <context:component-scan base-package=\"edu.asu.diging.tutorial.spring\" />\n\n        <bean\n            class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n            <property name=\"prefix\">\n                <value>/WEB-INF/views/</value>\n            </property>\n            <property name=\"suffix\">\n                <value>.jsp</value>\n            </property>\n        </bean>\n    </beans>\n\nThe **servlet-context.xml** specifies beans that you need in the context of a specific servlet (in our case the dispatcher). So far, it is pretty minimalistic. You register a view resolver that handles our JSP pages for us:\n\n    <bean\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\">\n            <value>/WEB-INF/views/</value>\n        </property>\n        <property name=\"suffix\">\n            <value>.jsp</value>\n        </property>\n    </bean>\n\nAnd you specified that you want to use annotations for the registration of beans, which are all located in sub-packages of edu.asu.diging.tutorial.spring:\n\n    <context:component-scan base-package=\"edu.asu.diging.tutorial.spring\" />\n\nRestart your Tomcat or redeploy your application. It should start up without errors again. **Note:** check the output in your console at the bottom of the Eclipse window to see if exceptions were thrown. Also, scroll up in the console to make sure you're not missing any.\n\n## The first controller\n\nLet's get started with the first controller. First, create a package called edu.asu.diging.tutorial.spring.web in your Java source folder (under Java Resources > src/main/java). In this package, create a class called HomeController.\n\n![HomeController]({{ site.baseurl }}/assets/img/spring/home-controller.png)\n\nThe first thing to do is to annotate this class with **@Controller**. You do this right before the class name:\n\n    package edu.asu.diging.tutorial.spring.web;\n\n    import org.springframework.stereotype.Controller;\n\n    @Controller\n    public class HomeController {\n\n    }\n\nNext, let's create a method that responds to requests to the root of our web application. Add the following method to your class:\n\n    @RequestMapping(value = \"/\")\n    public String home() {\n        return \"index\";\n    }\n\nThen, create a folder called **views** in your **WEB-INF** folder. Move the file **index.jsp** from your **WEB-INF** folder into this new **views** folder. Restart your server. If you open **http://localhost:8080/one/** in your browser, you should now see a \"hello world\" page. Also, check your condole output. You should find a line that says:\n\n    INFO: Root mapping to handler 'homeController'\n\nHow does Spring now to serve up our **index.jsp** when all we return is \"index\" in our controller method? Let's take a look at the **servlet-context.xml** again. We've specified the following bean:\n\n    <bean\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\">\n            <value>/WEB-INF/views/</value>\n        </property>\n        <property name=\"suffix\">\n            <value>.jsp</value>\n        </property>\n    </bean>\n\nThis view resolver takes the path we return in our controller method, appends what we specified through the property **suffix** prepends what we specified with the property **prefix** and then tries to find the resulting file path. Try modifying our **home()** method in the **HomeController** to return \"index2\" instead of index (you have to wait a second after you did the modifcation so that Eclipse can update the code in Tomcat (hotdeploy) or restart the server). If you now reload the page **http://localhost:8080/one/** you should see a 404 error. If you rename **index.jsp** to **index2.jsp**, everything should work fine again.\n\n## Let's create a service\n\nOk, in the last section we looked at the \"view\" and the \"controller\" part of MVC. Let's connect our controller to a model. We start by creating a new package called \"edu.asu.diging.tutorial.spring.service\". Inside this package, we create a class called \"MoodService\". Let's also create a second class called \"Mood\" in another new package \"edu.asu.diging.tutorial.spring.domain\". Your package structure should now look like this:\n\n![Package Structure]({{ site.baseurl }}/assets/img/spring/package-structure.png)\n\nNow, open **Mood.java** and add a field **feeling** with a getter and setter method and a constructor that initializes the **feelings** field:\n\n    package edu.asu.diging.tutorial.spring.domain;\n\n    public class Mood {\n\n        private String feeling;\n\n        public Mood(String mood) {\n            feeling = mood;\n        }\n\n        public String getFeeling() {\n            return feeling;\n        }\n\n        public void setFeeling(String feeling) {\n            this.feeling = feeling;\n        }\n    }\n\nNext, open **MoodService.java** and add a mood **getCurrentMood()** that returns a new mood. Make sure to annotate your class with the annotation **@Service**. This annotation tells Spring that you want the framework to manage your class.\n\n    package edu.asu.diging.tutorial.spring.service;\n\n    import org.springframework.stereotype.Service;\n\n    import edu.asu.diging.tutorial.spring.domain.Mood;\n\n    @Service\n    public class MoodService {\n\n        public Mood getCurrentMood() {\n            return new Mood(\"happy\");\n        }\n    }\n\nNow we have to let our controller know about our service class. Open your **HomeController** and add the following lines at the top of the class:\n\n    @Autowired\n    private MoodService service;\n\nThe whole class should now look like this:\n\n    package edu.asu.diging.tutorial.spring.web;\n\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.RequestMapping;\n\n    import edu.asu.diging.tutorial.spring.service.MoodService;\n\n    @Controller\n    public class HomeController {\n\n        @Autowired\n        private MoodService service;\n\n        @RequestMapping(value = \"/\")\n        public String home() {\n            return \"index2\";\n        }\n    }\n\nModify your **home()** method to look like this:\n\n    @RequestMapping(value = \"/\")\n    public String home(ModelMap map) {\n        map.addAttribute(\"mood\", service.getCurrentMood());\n        return \"index2\";\n    }\n\nWhat did you just do? First we \"autowired\" our new service class MoodService using *Dependency Injection*. Instead of instantiating the service class ourselves, we let Spring handle that for us. We just tell Spring that we want an object of type MoodService. We do a similar thing in our **home()** method. We tell Spring that we want an object of type **ModelMap** and Spring gives us an appropriate one when calling the method. We than add an attribute to the ModelMap that we can access in our JSP page.\n\nSpeaking of which. Let's open our JSP page and edit it as follows:\n\n    <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n    <%@ page isELIgnored=\"false\" %>\n\n    <html>\n    <body>\n    <h2>Hello World!</h2>\n\n    I am feeling: ${ mood.feeling }.\n    </body>\n    </html>\n\nNext, open your **pom.xml** and add the following dependency inside **dependencies**:\n\n    <dependency>\n    \t<groupId>jstl</groupId>\n    \t<artifactId>jstl</artifactId>\n    \t<version>1.2</version>\n    </dependency>\n\nRestart your server and reload **http://localhost:8080/one** you should now see:\n\n![Index page]({{ site.baseurl }}/assets/img/spring/browser.png)\n\n## Go and fly\n\nWhoohoo, you made it through the whole tutorial! Now, it's time for you to fly on your own. Try if you can get the following done:\n\n- Even a Tomcat server is not always happy. Your MoodService should know several moods, and randomly choose one in the method **getCurrentMood()**. As usual there are different ways of implementing this. Start with defining the different moods in the method itself. If that works, define a list of moods in a field.\n**Hint:** instead of initializing fields in the constructor use the annotation **@PostConstruct** on an init method. If you have trouble importing this annotation add the following dependeny to your POM file:\n\n        <dependency>\n        \t<groupId>javax.annotation</groupId>\n        \t<artifactId>jsr250-api</artifactId>\n        \t<version>1.0</version>\n        </dependency>\n\n- Remember how you autowired the MoodService? To use this technique to its whole extend, you also need to use an interface instead of a concrete implementation when autowiring. Try to use an interface when autowiring MoodService intead.\n\n- Let's go crazy, and add a second page! Put a link on your index2 page that bring the user to a second page that explains why Tomcat feels the way it feels (e.g. if the first page says that Tomcat feels sad, the second page could say something like because it didn't catch any mice today).\n\n- Last but not least, add your app a repository in your GitHub account and send us a link so we can look at it.\n\n:)\n\nYou can find the source code for this tutorial <a href=\"https://github.com/diging/spring-tutorials\">here</a>.\n\n### Comments/Updates\n\n#### Removing pom.properties/additonal pom.xml\n\nIf you notice that you have an additional folder in your project that contains additional **pom.properites** and **pom.xml** files (in my case it duplicated the complete directory structure to my project folder starting with \"/Users/...\") that **are not** your actual POM files, it is likely Maven's fault. If you want Maven to stop creating those files/directories, add the following to your **pom.xml** inside the **build** tag:\n\n    <plugins>\n    \t<plugin>\n    \t\t<artifactId>maven-jar-plugin</artifactId>\n    \t\t<configuration>\n    \t\t\t<archive>\n    \t\t\t\t<addMavenDescriptor>false</addMavenDescriptor>\n    \t\t\t</archive>\n    \t\t</configuration>\n    \t</plugin>\n    </plugins>\n\nYour whole **build** tag (it should come right after your **dependencies** tag) should look like this:\n\n    <build>\n    \t<finalName>one</finalName>\n    \t<plugins>\n    \t\t<plugin>\n    \t\t\t<artifactId>maven-jar-plugin</artifactId>\n    \t\t\t<configuration>\n    \t\t\t\t<archive>\n    \t\t\t\t\t<addMavenDescriptor>false</addMavenDescriptor>\n    \t\t\t\t</archive>\n    \t\t\t</configuration>\n    \t\t</plugin>\n    \t</plugins>\n    </build>\n"})
lunr_index.add({ url: '/2015/09/18/crucible.html', title: "Crucible", body: "To make it as easy as possible to help you with coding, we set up a Crucible server on our DigInG server:\n[http://diging.asu.edu/fisheye](http://diging.asu.edu/fisheye)\n\nThis page describes how you can use it to request help from us. First of all, create an account in Crucible and then login. You should see something like this:\n\n![Crubile Dashboard]({{ site.baseurl }}/assets/img/crucible/start.png)\n\nTo start a new review, click on the \"Create Review\" button on the top of the page. You will be asked to select a project. Select the one you are working on. If you have a question/review request that falls outside of our projects (e.g. for a tutorial), select the \"Default Project.\" Then click on \"Create Review.\"\n\nNext, you will be asked what you want to have reviewed. You will see a screen like this:\n\n![Create new review]({{ site.baseurl }}/assets/img/crucible/choose.png)\n\nIn most cases you likely will choose either the first (Browse Changeset) or the second (Choose Branch) option, which allows you to either choose a specific commit for review or choose a whole branch.\n\nIf you choose to browse for a specific changeset (or commit), you will see a screen like this:\n\n![Select changeset]({{ site.baseurl }}/assets/img/crucible/changeset.png)\n\nIf you choose to select a specific branch for review, your screen will look like this:\n\n![Select branch]({{ site.baseurl }}/assets/img/crucible/branch.png)\n\nSelect the branch that should be reviewed from the drop-down menu and click \"Add branch.\"\n\nYou can add more files for review by clicking on the button \"Add More Content\" at the bottom of the window.\n\nOnce you've added all the files you would like to have reviewed, click on \"Done.\"\n\nYou're screen should now show a navigator panel on the left side with all the files to be reviewed, some general information on the top, and if you select a file in the navigator, the changes that were made to that file since the last commit will be shown.\n\n![Review Window]({{ site.baseurl }}/assets/img/crucible/review_window.png)\n\nClick on the button \"Edit Details\" on the right upper corner. A details window will open. Enter a title for your review and if not already filled, select a reviewer (usually that would be Erick or Julia but you can also use this to have a classmate review your code). If there is a JIRA ticket associated with this review, enter its ticket id (e.g. QUAD-12) into the field labeled \"Linked issue\" and click \"Link.\"\n\n![Edit review details]({{ site.baseurl }}/assets/img/crucible/review_details.png)\n\nWhen you are all set up, click on the button \"Start Review\" in the upper right corner of your review window. The review details will now show your reviewer and their progress.\n\n![Review started]({{ site.baseurl }}/assets/img/crucible/review_started.png)\n\nThe reviewer can now review your code and make comments on specific lines. If you stay on the review page, Crucible will inform you when new comments are added. You can also respond to comments:\n\n![Comments]({{ site.baseurl }}/assets/img/crucible/comments.png)\n\nWhen the reviewer completet their review, you sill see a little complete indicator at the top of the review page:\n\n![Reviewers are done]({{ site.baseurl }}/assets/img/crucible/reviewer-done.png)\n\nOnce you are done with the review and looked at all the comments, click \"Close\" at the top of the page to close the review.\n\nIf you linked a JIRA issue to your review, JIRA will show the review and its status on the issue page.\n\n![Comments]({{ site.baseurl }}/assets/img/crucible/jira.png)\n"})
